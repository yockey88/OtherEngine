vertex [mesh : default] {
  
  layout (std140 , binding = 0) uniform Camera {
    mat4 projection;
    mat4 view;
    vec3 viewpoint;
  };
   
  layout (std430 , binding = 1) readonly buffer ModelData {
    mat4 models[];
  };

  in vec3 foe_position;

  const float fog_start = 19.0;
  const float fog_end = 20.0;
  
  vec4 calculate_fog(vec3 pos) {
    float distance = length(foe_position);
    float fog_factor = (distance - fog_start) / (fog_end - fog_start);
    fog_factor = clamp(fog_factor , 0 , 1);

    return vec4(fog_factor);
  }

  out vec4 foe_color;

  void main() {
    gl_Position = vec4(voe_position , 1.0);
  }

}

fragment {

  in vec4 foe_color;

  out vec4 FragColor;

  uniform sampler2D depth_tex;
  uniform sampler2D color_tex;

  vec3 add_fog() {
    return vec3(0.0 , 0.0 , 0.0);
  }

  void main() {
    FragColor = foe_color; // vec4(0.0 , 0.0 , 0.0 , 1.0);
  }

}

vertex [mesh : default] {
  
  out VOUT {
    vec3 normal;
  } vout;
  
  uniform sampler2D goe_position;
  uniform sampler2D goe_normal;
  uniform sampler2D goe_albedo;
  
  void main() {
    mat4 model = models[gl_InstanceID];

    mat3 normal_matrix = mat3(transpose(inverse(view * model)));
    vout.normal = vec3(vec4(normal_matrix * voe_normal , 0.0));
    gl_Position = view * model * vec4(voe_position , 1.0);
  }

}

geometry {

  layout (triangles) in;
  layout (line_strip , max_vertices = 6) out;
  
  layout (std140 , binding = 0) uniform Camera {
    mat4 projection;
    mat4 view;
    vec4 viewpoint;
  };
  
  in VOUT {
    vec3 normal;
  } gin[];

  const float m = 0.4;
  
  uniform float magnitude;
  
  void GenerateLine(int index) {
    vec4 glpos = gl_in[index].gl_Position;
    vec3 normal = gin[index].normal;

    gl_Position = projection * glpos;
    EmitVertex();
  
    vec4 adjusted_pos = glpos + vec4(normal , 0.0) * magnitude;
    gl_Position = projection * adjusted_pos;
    EmitVertex();
    EndPrimitive();
  }
  
  void main() {
    GenerateLine(0);
    GenerateLine(1);
    GenerateLine(2);
  }

}

fragment {

  out vec4 FragColor;
  
  void main() {
    FragColor = vec4(0.7 , 0.7 , 0.0 , 1.0);
  }

}


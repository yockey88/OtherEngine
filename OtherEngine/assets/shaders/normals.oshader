vertex [mesh : default] {
  
  layout (std140 , binding = 0) uniform Camera {
    mat4 projection;
    mat4 view;
  };
  
  layout (std430 , binding = 1) readonly buffer ModelData {
    mat4 models[];
  };
  
  out VOUT {
    vec3 normal;
  } vout;
  
  void main() {
    mat3 normal_mat = mat3(transpose(inverse(view * models[model_id])));
    vout.normal = normalize(vec3(vec4(normal_mat * vnorm , 0.0)));
  
    gl_Position = view * models[model_id] * vec4(vpos , 1.0);
  }

}

geometry {

  layout (triangles) in;
  layout (line_strip , max_vertices = 6) out;
  
  layout (std140 , binding = 0) uniform Camera {
    mat4 projection;
    mat4 view;
  };
  
  in VOUT {
    vec3 normal;
  } gin[];
  
  const float magnitude = 0.4f;

  uniform float m;
  
  void GenerateLine(int index) {
    gl_Position = projection * gl_in[index].gl_Position;
    EmitVertex();
  
    gl_Position = projection * 
                  (gl_in[index].gl_Position + vec4(gin[index].normal , 0.0) * magnitude);
    EmitVertex();
    EndPrimitive();
  }
  
  void main() {
    GenerateLine(0);
    GenerateLine(1);
    GenerateLine(2);
  }

}

fragment {

  out vec4 frag_color;
  
  void main() {
    frag_color = vec4(0.7 , 0.7 , 0.0 , 1.0);
  }

}


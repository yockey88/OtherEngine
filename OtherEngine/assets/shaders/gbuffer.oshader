vertex [mesh : default] {
  
  out vec3 fviewpoint;
  out vec3 foe_position;
  out vec3 foe_normal;

  void main() {
    mat4 model = models[gl_InstanceID];
    material = materials[gl_InstanceID];

    vec4 world_pos = model * vec4(voe_position , 1.0);
    foe_position = world_pos.xyz;
    instanceid = gl_InstanceID;

    mat3 normal_mat = transpose(inverse(mat3(model)));
    foe_normal = normal_mat * voe_normal;

    gl_Position = projection * view * world_pos;
  }

}

fragment {
  
  in vec3 foe_position;
  in vec3 foe_normal;
  
  void main() {
    g_position = vec4(foe_position , 1.0);
    g_normal = vec4(normalize(foe_normal) , 1.0);
    g_albedo.rgb = material.color.rgb;
    g_albedo.a = material.shininess;
  }

}

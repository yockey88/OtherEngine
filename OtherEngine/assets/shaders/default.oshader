vertex [mesh : default] {

  out vec3 fviewpoint;

  out vec3 foe_position;
  out vec3 foe_normal;
  out vec2 foe_texcoords;
  
  void main() {
    gl_Position = projection * view * models[gl_InstanceID] * vec4(voe_position , 1.0);

    fviewpoint = viewpoint.xyz;

    foe_position = vec3(models[gl_InstanceID] * vec4(voe_position , 1.0));
    foe_normal = mat3(transpose(inverse(models[gl_InstanceID]))) * voe_normal;
    foe_texcoords = voe_uvs;

    material = materials[gl_InstanceID];
  };

}

fragment {

  in vec3 fviewpoint;

  in vec3 foe_position;
  in vec3 foe_normal;
  in vec2 foe_texcoords;

  out vec4 FragColor;

  vec3 CalcDirectionLight(DirectionLight light , vec3 normal , vec3 view_dir) {
    vec3 light_dir = normalize(-light.direction.xyz);

    float diff = max(dot(normal , light_dir) , 0.0);
    
    vec3 reflect_dir = reflect(-light_dir , normal);
    float spec = pow(max(dot(view_dir , reflect_dir) , 0.0) , material.shininess);
    
    vec3 ambient = light.ambient.rgb * material.ambient.rgb;
    vec3 diffuse = light.diffuse.rgb * diff * material.diffuse.rgb;
    vec3 specular = light.specular.rgb * spec * material.specular.rgb;
    return (ambient + diffuse + specular);
  }

  vec3 CalcPointLight(PointLight light , vec3 normal , vec3 frag_pos , vec3 view_dir ,
                      vec3 albedo , float specular) {
    // diffuse
    vec3 light_dir = normalize(light.position.xyz - frag_pos);
    vec3 diffuse = max(dot(normal , light_dir) , 0.0) * albedo * (light.ambient.xyz + light.diffuse.xyz);

    // specular
    vec3 halfway = normalize(light_dir + view_dir);
    float s = pow(max(dot(normal , halfway) , 0.0) , 16.0);
    vec3 spec = light.ambient.xyz * s * specular;

    // attenuation
    float dist = length(light.position.xyz - frag_pos);
    float attenuation = 1.0 / (1.0 + light.linear * dist + light.quadratic * dist * dist);

    // diffuse = diffuse * attenuation;
    // specular = specular * attenuation;

    return (diffuse);
  }

  void main () {
    /// general data
    vec3 norm = normalize(foe_normal);
    vec3 view_dir = normalize(fviewpoint - foe_position);

    vec3 frag_pos = texture(goe_position , foe_texcoords).rgb;
    vec3 normal = texture(goe_normal , foe_texcoords).rgb;
    vec3 albedo = texture(goe_albedo , foe_texcoords).rgb;
    float specular = texture(goe_albedo , foe_texcoords).a;

    /// lights
    vec3 result = albedo * 0.1;
    
    int i = 0;
    for (; i < num_lights.x;) {
      result = result + CalcDirectionLight(direction_lights[i] , norm , view_dir);
      i = i + 1;
    }

    i = 0;
    for (; i < num_lights.y;) {
      result = result + CalcPointLight(point_lights[i] , normal , foe_position , view_dir , albedo , specular);
      i = i + 1;
    }
      
    ///  final color
    FragColor = vec4(result , 1.f);
  };

}

[project]
name = "Sandbox"
bin-dir = "C:/Yock/code/OtherEngine/bin/Debug"
script-bin-dir = "SandboxScripts"
lua-directory = "C:/Yock/code/OtherEngine/tests/sandbox_scripts/lua"
author = "Y"
version = 0.0.1
need-primary-scene = false

[window]
width = 800
height = 600
title = "Other Engine Sandbox"

[renderer]
cull-face = false

[log]
console-level = "debug" 
file-level = "trace"
path = "./logs/sandbox.log"

[script-engine.C#]
modules = { 
  "SandboxScripts.dll"
}

[script-engine.Lua]
modules = {
  "sandbox_ui.lua"
}

#[
  syntax ideas:
    - nice way to have a value that is a key-value??
    ex:

    [section]  
    outer_key = {
      inner_key1 = { ... }
      inner_key2 = { ... }
    }

    - small amounts of scripting? 
      (this might be the biggest argument for moving all configuration to lua, cause this would be nice but not worth the effort while also supporting three scripting language bindings unless it 
        was part of the scripting language bindings which leaves lua/python and python is for toolchain/project-management/game-dev-logistics)

    [function-name] (params, ...) -> (rets, ...) {
      /// do some sort of configuration???
    }

    ex:

    /// ran on game start-up
    [download-game-scripts] (endpoint, output_dir) -> bool {
      /// fetch game scripts from endpoint
      /// unpack into output_dir
      /// return true or false
    }
      > would need some sort of internal api
        (maybe write something in lua and have it run with the engine lua module loads???)

    - bind config file to reflection system
    ex:

    <transform> {
      position = {}
      ...
    }
      > parsing function could directly pull this from file and write it directly to the struct
#]